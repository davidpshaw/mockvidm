/*
 * Copyright Â© 2018 VMware, Inc. All Rights Reserved.
 * SPDX-License-Identifier: BSD-2-Clause
 */
'use strict'

const express = require('express')
const fs = require('fs')
const path = require('path')
const bodyParser = require('body-parser')

const vidm = require('./common/vidm')
const logging = require('./common/logging')
const stats = require('./common/stats')

var app = express()
app.set('trust proxy', true)

// accept and parse JSON POST bodies
app.use(bodyParser.json())

/**
 * For the specified endpoint(s), require a valid authorization header
 * @param  {} 'endpoints'
 * @param  {} (req, res, next)
 */
app.use('/ws1notifications/api/v1/notifications', (req, res, next) => {
  const authorization = req.header('authorization')

  if (authorization) {
    vidm.verifyAuth(authorization).then(function (decoded) {
      // Everything was good, let them pass through
      res.locals.jwt = decoded
      next()
    }).catch(function (err) {
      logging.logError(req.originalUrl, `vIdm-verification: (${authorization})`, 401, err)
      stats.addStat(stats.NotificationTypes.notification, 401)
      res.status(401).json({
        message: 'vIdm verification failed!'
      })
    })
  } else {
    logging.logError(req.originalUrl, 'auth-header-missing', 401)
    stats.addStat(stats.NotificationTypes.notification, 401)
    res.status(401).send({
      message: 'Missing Authorization header'
    })
  }
})

/**
 * Endpoint into which we can post notifications
 * Notifications are logged
 *
 * @param  {} '/ws1notifications/api/v1/notifications'
 * @param  {} function(req,res)
 */
app.post('/ws1notifications/api/v1/notifications', function (req, res) {
  try {
    const body = req.body
    const cardId = req.body.id
    if (cardId) {
      const status = 201
      stats.addStat(stats.NotificationTypes.notification, status)
      res.status(status).send()
    } else {
      const status = 400
      logging.logError(req.originalUrl, 'no card id', status, body)
      stats.addStat(stats.NotificationTypes.notification, status)
      res.status(status).send()
    }
  } catch (error) {
    const status = 500
    logging.logError(req.originalUrl, 'notification request error, was card posted?', status, error.message)
    stats.addStat(stats.NotificationTypes.notification, status)
    res.status(status).send()
  }
})

/**
 * Retrieve the public key used to sign JWTs generated by this mock vIDM
 *
 * @param  {} '/SAAS/API/1.0/REST/auth/token'
 * @param  {} express.static retrieval of the public key
 */
app.get('/SAAS/API/1.0/REST/auth/token', function (req, res) {
  stats.addStat(stats.NotificationTypes.public_key, 200)
  const keyFile = path.join(__dirname, vidm.publicKeyPath())
  res.sendFile(keyFile)
})

/**
 * Retrieve list of all log files
 *
 * @param  {fileName'} the name of the log file to retrieve
 * @param  {} function(req,res)
 */
app.use('/logs/:fileName', function (req, res) {
  const fileName = req.params.fileName
  if (fileName === undefined) {
    stats.addStat(stats.NotificationTypes.logging, 500)
    res.status(500).send()
  } else if (fileName === 'current') {
    const filePath = path.join(__dirname, `./logs/${logging.currentLogfile()}`)
    res.sendFile(filePath)
    stats.addStat(stats.NotificationTypes.logging, 200)
  } else {
    const filePath = path.join(__dirname, `./logs/${fileName}`)
    res.sendFile(filePath)
    stats.addStat(stats.NotificationTypes.logging, 200)
  }
})

/**
 * Retrieve an individual log file
 * @param  {} '/logs'
 * @param  {} function(req, res)
 */
app.get('/logs', function (req, res) {
  const dir = path.join(__dirname, 'logs')
  fs.readdir(dir, function (err, list) {
    if (err === null || err === undefined) {
      res.status(200).json(list)
    } else {
      res.status(500).json(err)
    }
  })
})

/**
 * Return the current statistics on requests that have been made
 * @param  {} '/stats'
 * @param  {} function(req
 * @param  {} res
 */
app.get('/stats', function (req, res) {
  stats.stats(req, res)
})

/**
 * Delete all current statistics, prepating for a new run
 * @param  {} '/resetStats'
 * @param  {} function(req
 * @param  {} res
 */
app.delete('/stats', function (req, res) {
  stats.resetStats(req, res)
})

/**
 * Perform device registration against vIDM
 * @param  {} '/SAAS/auth/device/register'
 * @param  {} function(req
 * @param  {} res
 */
app.get('/SAAS/auth/device/register', function (req, res) {
  vidm.deviceRegistration(req, res)
})

/**
 * Device activation in vIDM
 * @param  {} req
 * @param  {} res
 */
app.post('/SAAS/API/1.0/REST/oauth2/activate', function (req, res) {
  vidm.deviceActivation(req, res)
})

/**
 * Retrieve a JWT for use with this mock vIDM
 *
 * @param  {} '/SAAS/auth/oauthtoken'
 * @param  {} function(req,res)
 */
app.post('/SAAS/auth/oauthtoken', function (req, res) {
  vidm.userAuthToken(req, res)
})

app.listen(8080)
